from ntuple_processor.utils import _add_trees_from_dataset_files_to_TChain

from ROOT import TChain
from ROOT import RDataFrame
from ROOT import TFile

import logging
logger = logging.getLogger(__name__)


class RunManager:
    """PyROOT based objects taking a schedule-type object
    as argument and a channel which create RDataFrames
    based on the above mentioned schedule-type object.

    Args:
        channel (str): 'em', 'et', 'mt', 'tt', channel(s)
            for which we want to create a set of RDataFrames
        schedule (ResultManager): Set of histos/counts
            booked, from which we get the information to pass
            to the .Filter and .Histo1D operations

    Attributes:
        __tchains (list): list of ROOT.TChain objects, each
            with a one-to-one correspondence with the elements
            of 'schedule'
        __input_dataframes (list): list of ROOT.RDataFrame
            objects created from the elements of __tchains
        __output_dataframes (list): list of ROOT.RDataFrame
            objects generated by applying the operations
            in 'schedule' to the elements of __input_dataframes
        __histos (list): list of ROOT.TH1D objects generated by
            applying the operation .Histo1D() to the elements
            of __output_dataframes
    """
    def __init__(self, channel, schedule):
        self.__tchains = []
        for booked_histo in schedule.get_booked_histos():
            self.__tchains.append(
                self._get_tchain_from_dataset(
                    channel, booked_histo.get_dataset()))
        self.__input_dataframes = []
        for chain in self.__tchains:
            self.__input_dataframes.append(
                RDataFrame(chain))
        self.__output_dataframes = []
        for (in_rdf, booked_histo) in \
                zip(self.__input_dataframes,
                        schedule.get_booked_histos()):
            self.__output_dataframes.append(
                self._apply_selections(
                    in_rdf,
                    booked_histo.get_selections()))
        self.__histos = []
        for (out_rdf, booked_histo) in \
                zip(self.__output_dataframes,
                        schedule.get_booked_histos()):
            self.__histos.append(
                self._get_histos_from_dataframes(
                    out_rdf,
                    booked_histo.get_variable()))

    def get_tchains(self):
        return self.__tchains

    def get_input_RDFs(self):
        return self.__input_dataframes

    def get_output_RDFs(self):
        return self.__output_dataframes

    def run_locally(self, of_name):
        """Save to file the histograms booked.

        Args:
            of_name (str): Name of the output .root
                file
        """
        root_file = TFile(of_name, 'RECREATE')
        for histo in self.__histos:
            histo.Write()
        root_file.Close()

    def _get_tchain_from_dataset(self, channel, dataset):
        chain = TChain()
        _add_trees_from_dataset_files_to_TChain(
            chain, channel,
            dataset.get_files(),
            'ntuple')
        _add_trees_from_dataset_files_to_TChain(
            chain, channel,
            dataset.get_friends(),
            'ntuple')
        return chain

    def _apply_selections(self, in_rdf, selections):
        local_rdf = in_rdf
        if selections is not None:
            for selection in selections:
                for cut in selection:
                    out_rdf = local_rdf.Filter(cut[0])
                    local_rdf = out_rdf
        else:
            out_rdf = in_rdf
        return out_rdf

    def _get_histos_from_dataframes(self, rdf, var):
        return rdf.Histo1D(var)

